{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","onClick","Box","m","pt","Paper","className","Typography","variant","title","company","location","timestamp","date_array","split","day","slice","month","year","concat","join","getDMY","created_at","Array","prototype","move","from","to","this","splice","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","handleClickOpen","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","alt","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","useStyles","makeStyles","root","maxWidth","flexGrow","Jobs","jobs","useState","setOpen","selectedJob","selectJob","numJobs","length","classes","theme","useTheme","activeStep","setActiveStep","jobsOnPage","scrollToTop","c","document","documentElement","scrollTop","body","window","requestAnimationFrame","scrollTo","component","map","i","key","MobileStepper","steps","Math","ceil","position","nextButton","size","prevActiveStep","disabled","backButton","updateCB","a","fetch","res","json","console","log","App","joblist","updateJobs","useEffect","fetchJobs","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAiBe,SAASA,EAAT,GAAgC,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,QACjC,OACE,kBAACC,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAOJ,QAASA,EAASK,UAAW,OAClC,6BACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAAMR,EAAIS,OAC9B,kBAACF,EAAA,EAAD,KAAaP,EAAIU,SACjB,kBAACH,EAAA,EAAD,KAAaP,EAAIW,WAEnB,6BACE,kBAACJ,EAAA,EAAD,KAtBV,SAAgBK,GACd,IAAIC,EAAaD,EAAUE,MAAM,KAC7BC,EAAMF,EAAWG,MAAM,EAAG,GAC1BC,EAAQJ,EAAWG,MAAM,EAAG,GAC5BE,EAAOL,EAAWG,MAAM,EAAG,GAC/B,OAAOD,EAAII,OAAOF,EAAOC,GAAME,KAAK,KAiBfC,CAAOrB,EAAIsB,gBAdlCC,MAAMC,UAAUC,KAAO,SAAUC,EAAMC,GACrCC,KAAKC,OAAOF,EAAI,EAAGC,KAAKC,OAAOH,EAAM,GAAG,K,mECLpCI,EAAaC,IAAMC,YAAW,SAAoBC,EAAOC,GAC7D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAASD,OAG9B,SAASI,EAAT,GAAgE,IAA5CrC,EAA2C,EAA3CA,IAAKsC,EAAsC,EAAtCA,KAAuBC,GAAe,EAAhCC,gBAAgC,EAAfD,aAC7D,OAAKvC,EAAIS,MAKP,6BACE,kBAACgC,EAAA,EAAD,CACEH,KAAMA,EACNI,oBAAqBZ,EACrBa,aAAW,EACXC,QAASL,EACTM,kBAAgB,2BAChBC,mBAAiB,kCAEjB,kBAACC,EAAA,EAAD,CAAaC,GAAG,4BACbhD,EAAIS,MACL,yBACEH,UAAW,cACX2C,IAAKjD,EAAIkD,aACTC,IAAI,kBAGR,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEL,GAAG,iCACHM,wBAAyB,CAAEC,OAAQvD,EAAIwD,gBAG3C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQzD,QAASsC,EAAaoB,MAAM,WAApC,SAGA,uBAAGC,KAAM5D,EAAI6D,IAAKC,OAAO,UACvB,kBAACJ,EAAA,EAAD,CAAQC,MAAM,WAAd,aAhCD,8B,gECHLI,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,SAAU,KAIC,SAASC,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAAQ,EAGbtC,IAAMuC,UAAS,GAHF,mBAG9BhC,EAH8B,KAGxBiC,EAHwB,OAIJxC,IAAMuC,SAAS,IAJX,mBAI9BE,EAJ8B,KAIjBC,EAJiB,KAc/BC,EAAUL,EAAKM,OACfC,EAAUb,IACVc,EAAQC,cAhBuB,EAkBD/C,IAAMuC,SAAS,GAlBd,mBAkB9BS,EAlB8B,KAkBlBC,EAlBkB,KAmB/BC,EAAaZ,EAAKrD,MAAmB,GAAb+D,EAA8B,GAAbA,EAAkB,IAEjE,SAASG,IACP,IAAMC,EAAIC,SAASC,gBAAgBC,WAAaF,SAASG,KAAKD,UAC1DH,EAAI,IACNK,OAAOC,sBAAsBP,GAC7BM,OAAOE,SAAS,EAAGP,EAAIA,EAAI,IAc/B,OACE,yBAAK7E,UAAU,aACb,yBAAKA,UAAU,QACb,kBAAC+B,EAAD,CAAUC,KAAMA,EAAMtC,IAAKwE,EAAajC,YAlC1B,WAClBgC,GAAQ,MAkCJ,yBAAKjE,UAAU,UACb,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKmF,UAAU,MAAnC,6BAGA,kBAACpF,EAAA,EAAD,CAAYC,QAAQ,KAAKmF,UAAU,MAAnC,SACSjB,EADT,SAGA,kBAACnE,EAAA,EAAD,CAAYC,QAAQ,MAApB,4BAEDyE,EAAWW,KAAI,SAAC5F,EAAK6F,GAAN,OACd,kBAAC9F,EAAD,CACE+F,IAAKD,EACL7F,IAAKA,EACLC,QAAS,WAlDjBsE,GAAQ,GAoDEE,EAAUzE,UAKlB,kBAAC+F,EAAA,EAAD,CACE5F,EAAG,EACHK,QAAQ,OACRwF,MAAOC,KAAKC,KAAKxB,EAAU,IAC3ByB,SAAS,SACTpB,WAAYA,EACZzE,UAAWsE,EAAQX,KACnBmC,WACE,kBAAC1C,EAAA,EAAD,CAAQ2C,KAAK,QAAQpG,QA1C7B,WACE+E,GAAc,SAACsB,GAAD,OAAoBA,EAAiB,KACnDpB,KAwCgDqB,SAAyB,IAAfxB,GAApD,OAEuB,QAApBF,EAAMzC,UACL,kBAAC,IAAD,MAEA,kBAAC,IAAD,OAINoE,WACE,kBAAC9C,EAAA,EAAD,CAAQ2C,KAAK,QAAQpG,QA/C7B,WACE+E,GAAc,SAACsB,GAAD,OAAoBA,EAAiB,KACnDpB,KA6CgDqB,SAAyB,IAAfxB,GAC7B,QAApBF,EAAMzC,UACL,kBAAC,IAAD,MAEA,kBAAC,IAAD,MAJJ,W,iEC7FV,WAAyBqE,GAAzB,iBAAAC,EAAA,sEACoBC,IAHA,aAEpB,cACQC,EADR,gBAEqBA,EAAIC,OAFzB,OAEQA,EAFR,OAIEJ,EAASI,GAETC,QAAQC,IAAI,CAAEF,SANhB,4C,sBAuBeG,MAdf,WAAgB,IAAD,EACiBjF,IAAMuC,SAAS,IADhC,mBACN2C,EADM,KACGC,EADH,KAOb,OAJAnF,IAAMoF,WAAU,Y,oCACdC,CAAUF,KACT,IAGD,yBAAK5G,UAAU,OACb,kBAAC8D,EAAD,CAAMC,KAAM4C,MCbEI,QACW,cAA7B7B,OAAO7E,SAAS2G,UAEe,UAA7B9B,OAAO7E,SAAS2G,UAEhB9B,OAAO7E,SAAS2G,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASuC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.ea27df8f.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\n\nfunction getDMY(timestamp) {\n  let date_array = timestamp.split(\" \");\n  let day = date_array.slice(0, 1);\n  let month = date_array.slice(2, 3);\n  let year = date_array.slice(1, 2);\n  return day.concat(month, year).join(\" \");\n}\n\nArray.prototype.move = function (from, to) {\n  this.splice(to, 0, this.splice(from, 1)[0]);\n};\n\nexport default function Job({ job, onClick }) {\n  return (\n    <Box m={2} pt={3}>\n      <Paper onClick={onClick} className={\"job\"}>\n        <div>\n          <Typography variant=\"h6\">{job.title}</Typography>\n          <Typography>{job.company}</Typography>\n          <Typography>{job.location}</Typography>\n        </div>\n        <div>\n          <Typography>{getDMY(job.created_at)}</Typography>\n        </div>\n      </Paper>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function JobModal({ job, open, handleClickOpen, handleClose }) {\n  if (!job.title) {\n    return <div />;\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          {job.title}\n          <img\n            className={\"detail-logo\"}\n            src={job.company_logo}\n            alt=\"company logo\"\n          ></img>\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText\n            id=\"alert-dialog-slide-description\"\n            dangerouslySetInnerHTML={{ __html: job.description }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n          <a href={job.url} target=\"_blank\">\n            <Button color=\"primary\">Apply</Button>\n          </a>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Job from \"./Job\";\nimport JobModal from \"./JobModal\";\n\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 400,\n    flexGrow: 1,\n  },\n});\n\nexport default function Jobs({ jobs }) {\n  // modal\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedJob, selectJob] = React.useState({});\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // Pagination\n\n  const numJobs = jobs.length;\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const jobsOnPage = jobs.slice(activeStep * 50, activeStep * 50 + 50);\n\n  function scrollToTop() {\n    const c = document.documentElement.scrollTop || document.body.scrollTop;\n    if (c > 0) {\n      window.requestAnimationFrame(scrollToTop);\n      window.scrollTo(0, c - c / 8);\n    }\n  }\n\n  function handleNext() {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    scrollToTop();\n  }\n\n  function handleBack() {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    scrollToTop();\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jobs\">\n        <JobModal open={open} job={selectedJob} handleClose={handleClose} />\n        <div className=\"header\">\n          <Typography variant=\"h4\" component=\"h1\">\n            Entry Level Software Jobs\n          </Typography>\n          <Typography variant=\"h6\" component=\"h1\">\n            Found {numJobs} Jobs\n          </Typography>\n          <Typography variant=\"h8\">Source: Guthub Jobs API</Typography>\n        </div>\n        {jobsOnPage.map((job, i) => (\n          <Job\n            key={i}\n            job={job}\n            onClick={() => {\n              handleClickOpen();\n              selectJob(job);\n            }}\n          />\n        ))}\n      </div>\n      <MobileStepper\n        m={3}\n        variant=\"dots\"\n        steps={Math.ceil(numJobs / 50)}\n        position=\"static\"\n        activeStep={activeStep}\n        className={classes.root}\n        nextButton={\n          <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n            Next\n            {theme.direction === \"rtl\" ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        }\n        backButton={\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n            {theme.direction === \"rtl\" ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            Back\n          </Button>\n        }\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Jobs from \"./Jobs\";\nimport fetch from \"node-fetch\";\n\nconst JOB_API_URL = \"/api/jobs\";\n\nasync function fetchJobs(updateCB) {\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n\n  updateCB(json);\n\n  console.log({ json });\n}\n\nfunction App() {\n  const [joblist, updateJobs] = React.useState([]);\n\n  React.useEffect(() => {\n    fetchJobs(updateJobs);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Jobs jobs={joblist} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}